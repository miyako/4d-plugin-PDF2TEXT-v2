/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-PDF2TEXT.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : PDF2TEXT
 #	author : miyako
 #	2019/10/21
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-PDF2TEXT.h"

#pragma mark -

#if VERSIONWIN
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    glib_DllMain(hinstDLL, fdwReason, lpvReserved);
    gio_DllMain(hinstDLL, fdwReason, lpvReserved);
    gobject_DllMain(hinstDLL, fdwReason, lpvReserved);
    
    return TRUE;
}
#endif

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
                
			// --- PDF2TEXT
            
			case 1 :
				PDF_Get_text(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void PDF_Get_text(PA_PluginParameters params) {

    int startPage = 1;
    int finalPage = 1;
    int version = 2;
    CUTF8String Password;
    CUTF16String Method;
    PA_CollectionRef c = PA_CreateCollection();
    PA_ObjectRef options = PA_GetObjectParameter(params, 2);
    PA_Handle h = PA_GetBlobHandleParameter(params, 1);
    if(h) {
        
        char *data = PA_LockHandle(h);
        int length = (int)PA_GetHandleSize(h);
        
        if(ob_is_defined(options, L"start")) {
            startPage = ob_get_n(options, L"start");
        }
        
        if(ob_is_defined(options, L"end")) {
            finalPage = ob_get_n(options, L"end");
        }

        if(ob_is_defined(options, L"password")) {
            ob_get_s(options, L"password", &Password);
        }
        
        if(ob_is_defined(options, L"method")) {
            ob_get_a(options, L"method", &Method);
        }
        
        if(ob_is_defined(options, L"version")) {
            version = ob_get_n(options, L"version");
        }
        
        const char *password = Password.length() ? (const char *)Password.c_str() : NULL;
        
        //callback
        method_id_t methodId = PA_GetMethodID((PA_Unichar *)Method.c_str());
        bool abortedByCallbackMethod = false;
        bool isCallbackActive = false;
        int number_entry;
        
        PopplerDocument *pdffile;
        PopplerPage *page;
        
        pdffile = poppler_document_new_from_data(data, length, password, NULL);
        
        if(pdffile){
            
            int pageCount = poppler_document_get_n_pages(pdffile);
            
            startPage = (startPage > 0) ? startPage : 1;
            startPage = (startPage < pageCount) ? startPage : pageCount;
            
            finalPage = (finalPage > startPage) ? finalPage : pageCount;
            finalPage = (finalPage < pageCount) ? finalPage : pageCount;
            
            startPage--;
            finalPage--;
            
            if(methodId){
                number_entry = (finalPage - startPage) + 1;
                isCallbackActive = true;
            }
            
            int currentpageInd = 0;
            
            for(int pageInd = startPage; pageInd < pageCount; ++pageInd) {
                
                currentpageInd++;
                
                page = poppler_document_get_page(pdffile, pageInd);
                
                if(page){
                    
                    char *pageText = poppler_page_get_text(page);
                    CUTF8String pageTextUtf8((const uint8_t *)pageText);
                    C_TEXT pageTextUtf16;
                    pageTextUtf16.setUTF8String(&pageTextUtf8);
                    
                    PA_Variable    param[4];
                    
                    //callback
                    if(isCallbackActive){
                        
                        switch (version) {
                            case 1:
                            {
                                param[0] = PA_CreateVariable(eVK_Longint);
                                param[1] = PA_CreateVariable(eVK_Longint);
                                param[2] = PA_CreateVariable(eVK_Longint);
                                param[3] = PA_CreateVariable(eVK_Text);
                                PA_Unistring u = PA_CreateUnistring((PA_Unichar*)pageTextUtf16.getUTF16StringPtr());
                                PA_SetStringVariable(&param[3], &u);
                                PA_SetLongintVariable(&param[0], currentpageInd);
                                PA_SetLongintVariable(&param[1], number_entry);
                                PA_SetLongintVariable(&param[2], pageInd + 1);
                                PA_Variable result = PA_ExecuteMethodByID(methodId, param, 4);
                                if(PA_GetVariableKind(result) == eVK_Boolean){
                                    abortedByCallbackMethod = PA_GetBooleanVariable(result);
                                }
                                if(!abortedByCallbackMethod) {
                                    PA_SetCollectionElement(c, PA_GetCollectionLength(c), param[3]);
                                }
                                PA_ClearVariable(&param[0]);
                                PA_ClearVariable(&param[1]);
                                PA_ClearVariable(&param[2]);
                                PA_ClearVariable(&param[3]);
                            }
                            break;
                            
                            default:
                            {
                                PA_ObjectRef o = PA_CreateObject();
                                ob_set_i(o, L"position", currentpageInd);
                                ob_set_i(o, L"page", pageInd + 1);
                                ob_set_i(o, L"total", number_entry);
                                ob_set_s(o, "text", (const char *)pageTextUtf8.c_str());
                                param[0] = PA_CreateVariable(eVK_Object);
                                PA_SetObjectVariable(&param[0], o);
                                PA_Variable result = PA_ExecuteMethodByID(methodId, param, 1);
                                if(PA_GetVariableKind(result) == eVK_Boolean){
                                    abortedByCallbackMethod = PA_GetBooleanVariable(result);
                                }
                                if(!abortedByCallbackMethod) {
                                    param[3] = PA_CreateVariable(eVK_Text);
                                    PA_Unistring u = PA_CreateUnistring((PA_Unichar*)pageTextUtf16.getUTF16StringPtr());
                                    PA_SetStringVariable(&param[3], &u);
                                    PA_SetCollectionElement(c, PA_GetCollectionLength(c), param[3]);
                                }
                                PA_ClearVariable(&param[0]);
                                PA_ClearVariable(&param[3]);
                            }
                            break;
                        }
                        
                    }else{
                        PA_YieldAbsolute();
                    }
                    
                }//page
                
                if(abortedByCallbackMethod){
                    break;

                }
                
            }
            
            g_object_unref(pdffile);
            
        }else{

        }
        
        PA_UnlockHandle(h);
    }
    PA_ReturnCollection(params, c);
}

